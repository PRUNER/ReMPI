#include <iostream>
#include <list>
#include <map>
#include <thread>
#include <vector>

#include <string.h>
#include <stdint.h>


using namespace std;

class rempi_event
{
 public:
  rempi_event(string name);
  vector<int64_t> mpi_inputs;
  string name;
  //  friend ostream& operator<<(ostream& os, rempi_event event);

};

class rempi_irecv_event : public rempi_event
{
  
 public:
  /* int64_t  record_count; */
  /* int64_t buf; */
  /* int count; */
  /* int datatype; */
  /* int source; */
  /* int tag; */
  /* int comm; */
  /* int64_t request; */

  rempi_irecv_event(string name);
};


class rempi_test_event : public rempi_event
{
 public:
  int64_t record_count;
  int64_t request;
  int flag;
  int source;
  int tag;

};



class rempi_event_list {
 private:
  int rank;
  thread io_thread;
  
  map<string, list<rempi_event>> event_list_map;
  list<rempi_event> irecv_event_list;
  //  list<rempi_test_event>  test_event_list;

 public:
  rempi_event_list(int rank);
  ~rempi_event_list();
   void write_events();

  int add_event(int64_t buf,
		int count,
		int datatype,
		int source,
		int tag,
		int comm,
		int64_t request); //irecv

  int add_event( int64_t request,
		 int flag,
		 int source,
		 int tag); //test


  int get_event(int64_t &buf,
		int &count,
		int &datatype,
		int &source,
		int &tag,
		int &comm,
		int64_t &request); //irecv

  int get_event(int64_t &request,
		int &flag,
		int &source,
		int &tag); //test

};
